root = true

[*]
indent_style = space

[*.{csproj,Build.props}]
indent_size = 2

[*.cs]

# It took some time to find these links:
#
# - The Categories -
#   https://learn.microsoft.com/en-gb/dotnet/fundamentals/code-analysis/categories
#
# - The Severity Levels -
#   https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-options#severity-level

# Category: Design
dotnet_analyzer_diagnostic.category-Design.severity = error
dotnet_diagnostic.IDE0160.severity = none  # we want our namespaces file-scoped, not block-scoped
dotnet_diagnostic.CA1031.severity = suggestion  # Not practical in Blazor context, more often than not
dotnet_diagnostic.CA1032.severity = suggestion  # Standard Exception constructors
dotnet_diagnostic.CA1062.severity = none  # Seems pointless as we rely upon the compiler, not the runtime
dotnet_diagnostic.CA1064.severity = suggestion  # Exceptions should be public

# Category: Style
# NOTE: Setting rules to 'warning' means that dotnet format will 'fix' them for you - use 'suggestion' instead if you don't want this (e.g. IDE0010 and IDE0072)!
dotnet_analyzer_diagnostic.category-Style.severity = error
dotnet_diagnostic.IDE0008.severity = none  # we want to use var
dotnet_diagnostic.IDE0010.severity = suggestion  # incomplete switch, not handling all cases or no default
dotnet_diagnostic.IDE0022.severity = none  # we want to be able to define methods without a block body
dotnet_diagnostic.IDE0046.severity = suggestion  # subjectively this can lead to less readable code in some cases
dotnet_diagnostic.IDE0048.severity = none  # not always, plus this rule seems flakey with some expressions
dotnet_diagnostic.IDE0072.severity = suggestion  # incomplete switch, not handling all cases or no default
dotnet_diagnostic.IDE0130.severity = suggestion  # TODO remove this line to revert this rule to error

# Category: Maintainability
dotnet_analyzer_diagnostic.category-Maintainability.severity = error

# Category: Naming
dotnet_analyzer_diagnostic.category-Naming.severity = error
dotnet_diagnostic.CA1716.severity = suggestion  # The boilerplate project uses 'Shared' in a namespace

# Category: Performance
dotnet_analyzer_diagnostic.category-Performance.severity = error
dotnet_diagnostic.CA1812.severity = suggestion  # Barrier to velocity when prototyping!
dotnet_diagnostic.CA1848.severity = suggestion  # LoggerMessage delegates are OTT for our needs right now (premature optimisation)
dotnet_diagnostic.CA1849.severity = none  # For the scope of this codebase, being models and test code only, this is OTT

# Category: Reliability
dotnet_analyzer_diagnostic.category-Reliability.severity = error

# Category: Security
dotnet_analyzer_diagnostic.category-Security.severity = error

# Category: Usage
dotnet_analyzer_diagnostic.category-Usage.severity = error
dotnet_diagnostic.BL0005.severity = error
dotnet_diagnostic.CA2201.severity = suggestion
dotnet_diagnostic.CA2211.severity = error  # apparently Usage category, but was only coming up as a warning (!?)

# CSharp Diagnostics (not sure which category)
dotnet_diagnostic.CS1573.severity = suggestion  # It's logical to not document all params for extensions methods (i.e. the this is implicit)
dotnet_diagnostic.CS1591.severity = suggestion  # API docs are important, but not a blocker

# Other Diagnostics which we want to error on but are not sure what category they belong under
dotnet_diagnostic.SYSLIB0014.severity = error
dotnet_diagnostic.RZ10012.severity = error
dotnet_diagnostic.BL0007.severity = error

# Other Diagnostics which are at warning level but we don't want to care about right now
dotnet_diagnostic.CA1303.severity = suggestion  # Globalization category, apparently, but overriding that category didn't work!

# This rule, "Probable JSON string detected", is a joke.
# It was preventing us from adding static JSON strings to unit tests. Crazy.
dotnet_diagnostic.JSON002.severity = none
